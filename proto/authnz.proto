syntax = "proto3";

package com.github.dlshle.authnz;

option go_package = "github.com/dlshle/authnz/proto";

// each subject represents a user
// each user holds multiple groups 
message Subject {
    string id = 1;
    string user_id = 2;
}

message Group {
    string id = 1;
    repeated Attribute attributes = 2;
}

message Attribute {
    string key = 1;
    string value = 2;
}

message Contract {
  string id = 1;
  string subject_id = 2;
  string group_id = 3;
}

enum Operation {
    EQ = 0;
    LT = 1;
    GT = 2;
    LTE = 3;
    GTE = 4;
    CONTAINS = 5;
}

message Policy {
  string id = 1;
  PolicyCondition condition = 2;
}

message PolicyCondition {
    oneof condition {
      HasAttributesCondition has_attribute = 1;
      EvaluateOPCondition evaluate_attribute = 2;
      ContextInGroupAttributesCondition context_in_group_attributes = 3;
      ContextInLiteralSetCondition context_in_literal_set = 4;
      ContextInGroupAttributesInLiteralSetCondition attribute_in_literal_set = 5;
      NegationCondition negation = 6;
      OrCondition or = 7;
      AndCondition and = 8;
    }
}
// check if the request(group)
message HasAttributesCondition {
  repeated string attribute_key = 1;
}
message EvaluateOPCondition {
  string attribute_key = 1;
  Operation op = 2;
  string value = 3;
}
message ContextInGroupAttributesCondition {
  string context_key = 1;
  repeated string group_attribute_key = 2;
}
message ContextInLiteralSetCondition {
  string context_key = 1;
  repeated string literal = 2;
}
// if certain attribute is within the string literal
message ContextInGroupAttributesInLiteralSetCondition {
  string group_attribute_key = 1;
  repeated string literal = 2;
}
message NegationCondition {
  PolicyCondition condition = 1;
}
message OrCondition {
  repeated PolicyCondition condition = 1;
}
message AndCondition {
  repeated PolicyCondition condition = 1;
}

enum Verdict {
  UNKNOWN = 0;
  DENIED = 1;
  PERMITTED = 2;
}

message ContextProperty {
  string key = 1;
  string value = 2;
}

message AuthorizeRequest {
  string subject_id = 1; // Caller will be trusted that this is authentic.
  string policy_id = 2;
  repeated ContextProperty context_property = 3;
  bool verbose = 4;
}
message AuthorizeResponse {
  Verdict verdict = 1;
}

message AuthContext {
  // the set of properties used for authorization
  repeated ContextProperty context_property = 1;
  // the subject id that will be authorized
  string subject_id = 2;
}

message AddSubjectRequest {
  string user_id = 1;
}

message AddSubjectResponse {
  Subject subject = 1;
}

message SubjectByIDRequest {
  string subject_id = 1;
}


message GroupRequest {
  Group group = 1;
}

message GroupResponse {
  Group group = 1;
}

message GroupByIDRequest {
  string group_id = 1;
}

message PolicyRequest {
  Policy policy = 1;
}

message PolicyByIDRequest {
  string policy_id = 1;
}

message ContractRequest {
  Contract contract = 1;
}

message ContractResponse {
  Contract contract = 1;
}

message DeleteContractRequest {
  string contract_id = 1;
}

message EmptyResponse {}

service AuthNZ {
    rpc authorize(AuthorizeRequest) returns (AuthorizeResponse); 
    rpc addSubject(AddSubjectRequest) returns (AddSubjectResponse);
    rpc getSubject(SubjectByIDRequest) returns (Subject);
    rpc deleteSubject(SubjectByIDRequest) returns (EmptyResponse);
    rpc createGroup(GroupRequest) returns (GroupResponse);
    rpc getGroup(GroupByIDRequest) returns (GroupResponse);
    rpc updateGroup(GroupRequest) returns (GroupResponse);
    rpc deleteGroup(GroupByIDRequest) returns (EmptyResponse);
    rpc duplicateGroup(GroupByIDRequest) returns (GroupResponse);
    rpc createPolicy(PolicyRequest) returns (Policy);
    rpc getPolicy(PolicyByIDRequest) returns (Policy);
    rpc updatePolicy(PolicyRequest) returns (Policy);
    rpc deletePolicy(PolicyByIDRequest) returns (EmptyResponse);
    rpc createContract(ContractRequest) returns (ContractResponse);
    rpc deleteContract(DeleteContractRequest) returns (EmptyResponse);
}